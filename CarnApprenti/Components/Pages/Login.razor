@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components
@using System.Security.Cryptography;
@using System.Diagnostics
@using System.Text.Json
@using System.Text
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject DatabaseService DatabaseService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container d-flex justify-content-center align-items-center min-vh-100">
        <div class="login-container p-4 border shadow-lg rounded">
            <h1 class="text-center text-primary mb-4">
                <span class="bi bi-lock-fill"></span> Connexion
            </h1>

            @if (loginErrorMessage != null)
            {
                <div class="alert alert-danger text-center">
                    @loginErrorMessage
                </div>
            }

            <div class="form-group mb-3">
                <label for="identifiant" class="form-label">Identifiant :</label>
                <InputText id="identifiant" @bind-Value="loginModel.Identifiant" class="form-control" required />
            </div>

            <div class="form-group mb-3">
                <label for="mdp" class="form-label">Mot de passe :</label>
                <InputText id="mdp" type="password" @bind-Value="loginModel.Mdp" class="form-control" required />
            </div>

            <button type="submit" class="btn btn-primary w-100 mt-3">Se connecter</button>
        </div>
    </div>
</EditForm>

@code {
    private int? userId;

    protected override async Task OnInitializedAsync()
    {
        userId = await SessionStorage.GetItemAsync<int?>("UserId");

        if (userId.HasValue)
        {
            Navigation.NavigateTo("/");
        }
    }

    private LoginModel loginModel = new LoginModel();
    private string? loginErrorMessage;

    private async Task HandleLogin()
    {
        Logger.LogInformation("Tentative de connexion pour l'utilisateur : {Identifiant}", loginModel.Identifiant);

        if (string.IsNullOrEmpty(loginModel.Identifiant) || string.IsNullOrEmpty(loginModel.Mdp))
        {
            loginErrorMessage = "Veuillez remplir tous les champs.";
            return;
        }

        try
        {
            var user = await DatabaseService.GetUserByEmailAsync(loginModel.Identifiant);

            if (user != null)
            {
                var encryptedPassword = user["Password"].ToString();

                if (DecryptLaravelPassword(encryptedPassword, "base64:COwLBPHHHx0xJdy/CAIMVbO4VbgkffA/0QntdefwruQ=") == loginModel.Mdp)
                {
                    // Récupérer le rôle de l'utilisateur
                    var role = await DatabaseService.GetUserRolesAsync(ulong.Parse(user["Id"].ToString()));

                    // Vérifier si l'utilisateur a le rôle "admin" ou "qualite"
                    if (role == "admin" || role == "qualite")
                    {
                        // Stocker les informations de l'utilisateur et son rôle dans la session
                        await SessionStorage.SetItemAsync("Role", role); // Rôle de l'utilisateur
                        await SessionStorage.SetItemAsync("Email", loginModel.Identifiant);
                        await SessionStorage.SetItemAsync("Id", int.Parse(user["Id"].ToString()));
                        await SessionStorage.SetItemAsync("Nom", user["Nom"].ToString());
                        await SessionStorage.SetItemAsync("Prenom", user["Prenom"].ToString());

                        // Rediriger vers la page d'accueil
                        Navigation.NavigateTo("/");
                    }

                    else
                    {
                        loginErrorMessage = "Identifiant ou mot de passe incorrect.";
                    }
                }
                else
                {
                    loginErrorMessage = "Identifiant ou mot de passe incorrect";
                }
            }
            else
            {
                loginErrorMessage = "Identifiant ou mot de passe incorrect";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors de la connexion");
            loginErrorMessage = $"Erreur: {ex.Message}";
        }
    }

    public static string DecryptLaravelPassword(string encryptedData, string laravelAppKey)
    {
        try
        {
            // 1️⃣ Extraire la clé Laravel
            byte[] keyBytes = Convert.FromBase64String(laravelAppKey.Replace("base64:", ""));

            // 2️⃣ Décoder le JSON de Laravel (IV et texte chiffré)
            string jsonString = Encoding.UTF8.GetString(Convert.FromBase64String(encryptedData));
            var encryptedParts = JsonSerializer.Deserialize<Dictionary<string, string>>(jsonString);

            // 3️⃣ Décoder IV et texte chiffré
            byte[] iv = Convert.FromBase64String(encryptedParts["iv"]);

            // Nettoyage du Base64
            string base64Value = encryptedParts["value"].Replace("\n", "").Replace("\r", "").Replace(" ", "");

            byte[] cipherText = Convert.FromBase64String(base64Value);

            // 4️⃣ Déchiffrer le texte chiffré avec AES
            using var aes = Aes.Create();
            aes.Key = keyBytes;
            aes.IV = iv;
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;

            using var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
            using var msDecrypt = new MemoryStream(cipherText);
            using var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
            using var srDecrypt = new StreamReader(csDecrypt);

            string decryptedPassword = srDecrypt.ReadToEnd();
            return decryptedPassword;
        }
        catch (Exception ex)
        {
            return null;
        }
    }

    public class LoginModel
    {
        public string? Identifiant { get; set; }
        public string? Mdp { get; set; }
    }
}
