@page "/login"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components
@using System.Security.Cryptography;
@using System.Diagnostics
@using System.Text.Json
@using System.Text
@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject DatabaseService DatabaseService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage

<EditForm Model="loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="login_container">
        <h1 class="text-reglages">
            <span class="bi bi-login-fill-nav-menu" aria-hidden="true"></span> Login
        </h1>
        @if (loginErrorMessage != null)
        {
            <h3 style="color: red;">@loginErrorMessage</h3>
        }
        <label for="identifiant" class="text-reglages">Identifiant :</label><br>
        <InputText id="identifiant" @bind-Value="loginModel.Identifiant" required /><br>
        <label for="mdp" class="text-reglages">Mot de passe :</label><br>
        <InputText id="mdp" type="password" @bind-Value="loginModel.Mdp" required /><br>
        <button type="submit" class="submit">Se connecter</button>
    </div>
</EditForm>

@code {
    private int? userId;

    protected override async Task OnInitializedAsync()
    {
        userId = await SessionStorage.GetItemAsync<int?>("UserId");

        if (userId.HasValue)
        {
            Navigation.NavigateTo("/");
        }
    }

    private LoginModel loginModel = new LoginModel();
    private string? loginErrorMessage;

    private async Task HandleLogin()
    {
        Logger.LogInformation("Tentative de connexion pour l'utilisateur : {Identifiant}", loginModel.Identifiant);

        if (string.IsNullOrEmpty(loginModel.Identifiant) || string.IsNullOrEmpty(loginModel.Mdp))
        {
            loginErrorMessage = "Veuillez remplir tous les champs.";
            return;
        }

        try
        {
            var user = await DatabaseService.GetUserByEmailAsync(loginModel.Identifiant);

            if (user != null)
            {
                var encryptedPassword = user["Password"].ToString();

                if (DecryptLaravelPassword(encryptedPassword, "base64:COwLBPHHHx0xJdy/CAIMVbO4VbgkffA/0QntdefwruQ=") == loginModel.Mdp)
                {
                    // Récupérer le rôle de l'utilisateur
                    var role = await DatabaseService.GetUserRolesAsync(ulong.Parse(user["Id"].ToString()));

                    // Vérifier si l'utilisateur a le rôle "admin" ou "qualite"
                    if (role == "admin" || role == "qualite")
                    {
                        // Stocker les informations de l'utilisateur et son rôle dans la session
                        await SessionStorage.SetItemAsync("Role", role); // Rôle de l'utilisateur
                        await SessionStorage.SetItemAsync("Email", loginModel.Identifiant);
                        await SessionStorage.SetItemAsync("Id", int.Parse(user["Id"].ToString()));
                        await SessionStorage.SetItemAsync("Nom", user["Nom"].ToString());
                        await SessionStorage.SetItemAsync("Prenom", user["Prenom"].ToString());

                        // Rediriger vers la page d'accueil
                        Navigation.NavigateTo("/");
                    }

                    else
                    {
                        loginErrorMessage = "Identifiant ou mot de passe incorrect.";
                    }
                }
                else
                {
                    loginErrorMessage = "Identifiant ou mot de passe incorrect";
                }
            }
            else
            {
                loginErrorMessage = "Identifiant ou mot de passe incorrect";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Erreur lors de la connexion");
            loginErrorMessage = $"Erreur: {ex.Message}";
        }
    }

    public static string DecryptLaravelPassword(string encryptedData, string laravelAppKey)
    {
        try
        {
            // 1️⃣ Extraire la clé Laravel
            byte[] keyBytes = Convert.FromBase64String(laravelAppKey.Replace("base64:", ""));
            Console.WriteLine("Taille de la clé (octets) : " + keyBytes.Length); // Doit afficher 32

            // 2️⃣ Décoder le JSON de Laravel (IV et texte chiffré)
            string jsonString = Encoding.UTF8.GetString(Convert.FromBase64String(encryptedData));
            Console.WriteLine("JSON extrait : " + jsonString);
            var encryptedParts = JsonSerializer.Deserialize<Dictionary<string, string>>(jsonString);

            // 3️⃣ Décoder IV et texte chiffré
            byte[] iv = Convert.FromBase64String(encryptedParts["iv"]);
            Console.WriteLine("Taille de l'IV (octets) : " + iv.Length); // Doit afficher 16

            // Nettoyage du Base64 (pour retirer \n, \r, etc.)
            string base64Value = encryptedParts["value"].Replace("\n", "").Replace("\r", "").Replace(" ", "");
            Console.WriteLine("Base64 nettoyé : " + base64Value);

            byte[] cipherText = Convert.FromBase64String(base64Value);
            Console.WriteLine("Taille du texte chiffré (octets) : " + cipherText.Length);

            // 4️⃣ Déchiffrer le texte chiffré avec AES
            using var aes = Aes.Create();
            aes.Key = keyBytes;
            aes.IV = iv;
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7; // Laravel utilise PKCS7

            using var decryptor = aes.CreateDecryptor(aes.Key, aes.IV);
            using var msDecrypt = new MemoryStream(cipherText);
            using var csDecrypt = new CryptoStream(msDecrypt, decryptor, CryptoStreamMode.Read);
            using var srDecrypt = new StreamReader(csDecrypt);

            string decryptedPassword = srDecrypt.ReadToEnd();
            Console.WriteLine("Mot de passe déchiffré : " + decryptedPassword);
            return decryptedPassword;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Erreur de déchiffrement : " + ex.Message);
            return null;
        }
    }


    public class LoginModel
    {
        public string? Identifiant { get; set; }
        public string? Mdp { get; set; }
    }
}
