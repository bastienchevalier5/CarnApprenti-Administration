@page "/edit_user/{userId}"
@inject NavigationManager Navigation
@inject DatabaseService DatabaseService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime js
@using BCrypt.Net
@using System.Text.Json
@using System.Text
@using System.Security.Cryptography
@using static CarnApprenti.LivretApprentissageContext
@using CarnApprenti.Components.Layout

<div class="sidebar">
    <NavMenu />
</div>

<div style="margin-left:250px">

    <button class="btn btn-secondary mb-3" @onclick="GoBack">← Retour</button>

    <h1 class="text-center mb-4">Modifier un utilisateur</h1>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    <div class="container">
        <div class="form-container">
            <EditForm Model="@user" class="text-center" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <!-- Champs Nom -->
                <div class="form-group mb-3 w-50 mx-auto">
                    <label for="Nom" class="form-label">Nom</label>
                    <InputText id="Nom" class="form-control" @bind-Value="user.Nom"  />
                </div>

                <!-- Champs Prénom -->
                <div class="form-group mb-3 w-50 mx-auto">
                    <label for="Prenom" class="form-label">Prénom</label>
                    <InputText id="Prenom" class="form-control" @bind-Value="user.Prenom"  />
                </div>

                <!-- Champs Email -->
                <div class="form-group mb-3 w-50 mx-auto">
                    <label for="Email" class="form-label">Email</label>
                    <InputText id="Email" class="form-control" @bind-Value="user.Email"  />
                </div>

                <!-- Sélectionner le rôle -->
                <div class="form-group mb-3 w-50 mx-auto">
                    <label for="Role" class="form-label">Rôle</label>
                    <InputSelect id="Role" class="form-control" @bind-Value="selectedRole">

                        @foreach (var role in roles)
                        {
                            <option value="@role">@role</option>
                        }
                    </InputSelect>
                </div>

                <!-- Sélectionner un apprenant si rôle 'tuteur' -->
                @if (selectedRole == "tuteur")
                {
                    <div class="form-group mb-3 w-50 mx-auto">
                        <label for="Tuteur" class="form-label">Sélectionner un apprenant</label>
                        <InputSelect id="Tuteur" class="form-control" @bind-Value="selectedApprenantId">

                            @foreach (var apprenant in apprenants)
                            {
                                <option value="@apprenant.Id">@apprenant.Nom @apprenant.Prenom</option>
                            }
                        </InputSelect>
                    </div>
                }

                <!-- Sélectionner un groupe si rôle 'apprenant' ou 'referent' -->
                @if (selectedRole == "apprenant" || selectedRole == "referent")
                {
                    <div class="form-group mb-3 w-50 mx-auto">
                        <label for="Groupe" class="form-label">Groupe</label>
                        <InputSelect id="Groupe" class="form-control" @bind-Value="selectedGroupeId">

                            @foreach (var groupe in groupes)
                            {
                                <option value="@groupe.Id">@groupe.Nom</option>
                            }
                        </InputSelect>
                    </div>
                }

                <!-- Nouveau mot de passe -->
                <div class="form-group mb-3 w-50 mx-auto">
                    <label for="NewPassword" class="form-label">Nouveau mot de passe</label>
                    <InputText id="NewPassword" class="form-control" type="password" @bind-Value="newPassword" />
                </div>

                <!-- Confirmation mot de passe -->
                <div class="form-group mb-3 w-50 mx-auto">
                    <label for="ConfirmPassword" class="form-label">Confirmer le mot de passe</label>
                    <InputText id="ConfirmPassword" class="form-control" type="password" @bind-Value="confirmPassword" />
                </div>

                <!-- Bouton de soumission -->
                <button type="submit" class="btn btn-primary mb-3">Modifier</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? userId { get; set; }
    private User user = new User();
    private string? errorMessage;
    private List<string> roles = new List<string> { "admin", "qualite", "referent", "apprenant", "tuteur" };
    private List<Groupe> groupes = new List<Groupe>();
    private List<User> apprenants = new List<User>();
    private string? selectedRole;
    private ulong? selectedGroupeId;
    private ulong? selectedApprenantId;

    // Champs pour gérer le mot de passe
    private string? newPassword;
    private string? confirmPassword;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            groupes = await DatabaseService.GetGroupesAsync();
            apprenants = await DatabaseService.GetUsersByRoleAsync("Apprenant");

            // Récupérer l'utilisateur à éditer
            user = await DatabaseService.GetUserByIdAsync(ulong.Parse(userId));
            selectedRole = await DatabaseService.GetUserRolesAsync(user.Id);
            selectedGroupeId = user.GroupeId;
            selectedApprenantId = user.ApprenantId;
        }
        catch (Exception ex)
        {
            errorMessage = $"Une erreur s'est produite lors du chargement des données : {ex.Message}";
        }
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(user.Nom))
            {
                errorMessage = "Veuillez entrer un nom.";
                return;
            }

            if (string.IsNullOrEmpty(user.Prenom))
            {
                errorMessage = "Veuillez entrer un prénom.";
                return;
            }

            if (string.IsNullOrEmpty(user.Email))
            {
                errorMessage = "Veuillez entrer un email";
                return;
            }

            if (string.IsNullOrEmpty(selectedRole))
            {
                errorMessage = "Veuillez sélectionner un rôle.";
                return;
            }

            if (selectedRole == "tuteur")
            {
                user.ApprenantId = selectedApprenantId;
            }

            if (selectedRole == "apprenant" || selectedRole == "referent")
            {
                user.GroupeId = selectedGroupeId;
            }

            if (!string.IsNullOrEmpty(newPassword))
            {
                if (newPassword != confirmPassword)
                {
                    errorMessage = "Les mots de passe ne correspondent pas.";
                    return;
                }

                user.Password = EncryptLaravelPassword(newPassword, "base64:COwLBPHHHx0xJdy/CAIMVbO4VbgkffA/0QntdefwruQ=");
            }

            await DatabaseService.UpdateUserAsync(user);

            if (!string.IsNullOrEmpty(selectedRole))
            {
                await DatabaseService.AssignRoleToUserAsync(user.Id, selectedRole);
            }

            Navigation.NavigateTo("/users");
        }
        catch (Exception ex)
        {
            errorMessage = $"Une erreur s'est produite lors de la modification de l'utilisateur : {ex.Message}";
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/users");
    }

    public static string EncryptLaravelPassword(string plainText, string laravelAppKey)
    {
        try
        {
            byte[] keyBytes = Convert.FromBase64String(laravelAppKey.Replace("base64:", ""));
            using var aes = Aes.Create();
            aes.Key = keyBytes;
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            aes.GenerateIV();
            byte[] iv = aes.IV;

            using var encryptor = aes.CreateEncryptor(aes.Key, aes.IV);
            using var msEncrypt = new MemoryStream();
            using var csEncrypt = new CryptoStream(msEncrypt, encryptor, CryptoStreamMode.Write);
            using var swEncrypt = new StreamWriter(csEncrypt);
            swEncrypt.Write(plainText);
            swEncrypt.Close();

            byte[] cipherText = msEncrypt.ToArray();

            var encryptedParts = new Dictionary<string, string>
            {
                { "iv", Convert.ToBase64String(iv) },
                { "value", Convert.ToBase64String(cipherText) }
            };

            string jsonString = JsonSerializer.Serialize(encryptedParts);
            return Convert.ToBase64String(Encoding.UTF8.GetBytes(jsonString));
        }
        catch (Exception ex)
        {
            throw new Exception($"Erreur de chiffrement : {ex.Message}");
        }
    }
}
