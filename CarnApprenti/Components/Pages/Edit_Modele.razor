@page "/edit_modele/{modeleId}"
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using static CarnApprenti.LivretApprentissageContext
@inject DatabaseService DatabaseService
@inject NavigationManager Navigation
@inject ILogger<Edit_Modele> Logger
@inject IJSRuntime js
@using CarnApprenti.Components.Layout

<div class="sidebar">
    <NavMenu />
</div>

<div style="margin-left:250px">

    <button class="btn btn-secondary mb-3" @onclick="GoBack">← Retour</button>

    <h1 class="text-center mb-4">Modifier un modèle</h1>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (isLoading)
    {
        <div class="text-center">
            <h2>Chargement des données...</h2>
        </div>
    }
    else
    {
        <EditForm Model="modele" class="text-center" OnValidSubmit="HandleSubmit">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group mb-3 w-50 mx-auto">
                <label for="nom" class="form-label">Nom du modèle</label>
                @if (modele != null)
                {
                    <InputText id="nom" class="form-control" @bind-Value="modele.Nom" />
                }
            </div>

            <div class="form-group mb-3 w-50 mx-auto">
                <label for="groupe" class="form-label">Groupe</label>
                @if (modele != null)
                {
                    <InputSelect id="groupe" class="form-control" @bind-Value="modele.GroupeId">

                        @foreach (var groupe in groupes)
                        {
                            <option value="@groupe.Id">@groupe.Nom</option>
                        }
                    </InputSelect>

                }
            </div>

            <div class="form-group mb-3 w-50 mx-auto">
                <label for="siteId" class="form-label">Choisir un site</label>
                @if (modele != null)
                {
                    <InputSelect id="siteId" class="form-control" @bind-Value="modele.SiteId">

                        @foreach (var site in sites)
                        {
                            <option value="@site.Id">@site.Nom</option>
                        }
                    </InputSelect>
                }
            </div>

            <!-- Compositions -->
            <div class="form-group mb-3 w-50 mx-auto" id="compositionContainer">
                <h3>Compositions</h3>
                @for (int i = 0; i < compositionModels.Count; i++)
                {
                    var currentIndex = i;
                    <div class="composition-block border p-3 mb-3">
                        <p>Composition @(currentIndex + 1)</p>

                        <div class="form-group mb-3 w-50 mx-auto">
                            <label for="@($"type_{currentIndex}")">Type de composition :</label>
                            <InputText id="@($"type_{currentIndex}")" class="form-control"
                                       @bind-Value="compositionModels[currentIndex].Type" />
                        </div>

                        <div class="form-group mb-3 w-50 mx-auto">
                            <label for="@($"pdf_{currentIndex}")">PDF de la composition :</label>
                            <InputFile id="@($"pdf_{currentIndex}")" class="form-control"
                                       OnChange="@(e => HandleFileSelected(e, currentIndex))" />
                            <small class="form-text text-muted">Fichier actuel : @compositionModels[currentIndex].ExistingFileName</small>
                        </div>
                    </div>
                }

                <button type="button" class="btn btn-info mt-3" @onclick="AddComposition">
                    Ajouter une composition
                </button>
            </div>

            <button type="submit" class="btn btn-primary mb-3">Modifier</button>

        </EditForm>
    }
</div>
@code {
    [Parameter] public string ?modeleId { get; set; }
    private bool isLoading = true;
    private Modele? modele = new Modele();
    private List<Site> sites = new List<Site>();
    private List<Groupe> groupes = new List<Groupe>();
    private List<CompositionModel> compositionModels = new List<CompositionModel>();
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            sites = await DatabaseService.GetSitesAsync();
            groupes = await DatabaseService.GetGroupesAsync();

            if (modeleId != null)
            {
                modele = await DatabaseService.GetModeleByIdAsync(ulong.Parse(modeleId));

            }
            if (modele == null)
            {
                Navigation.NavigateTo("/modeles");
                return;
            }

            var compositions = await DatabaseService.GetCompositionsByModeleIdAsync(modele.Id);
            foreach (var composition in compositions)
            {
                compositionModels.Add(new CompositionModel
                    {
                        Type = composition.Nom,
                        ExistingFileName = Path.GetFileName(composition.Lien)
                    });
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur lors du chargement des données : {ex.Message}");
        }
        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        try
        {
            Logger.LogInformation("Début de la soumission du formulaire");

            if (modele != null)
            {
                if (string.IsNullOrEmpty(modele.Nom))
                {
                    errorMessage = "Veuillez entrer un nom";
                    return;
                }

                await DatabaseService.UpdateModeleAsync(modele);
            }

            foreach (var composition in compositionModels)
            {
                if (composition.File != null)
                {
                    Logger.LogInformation($"Traitement du fichier : {composition.File.Name}");

                    var fileUrl = await UploadFile(composition.File);

                    if (composition.Id == 0 && modele != null) // New Composition
                    {
                        var newComposition = new Composition
                            {
                                Nom = composition.Type,
                                Lien = fileUrl,
                                ModeleId = modele.Id,
                                CreatedAt = DateTime.UtcNow,
                                UpdatedAt = DateTime.UtcNow
                            };

                        await DatabaseService.AddCompositionAsync(newComposition);
                        Logger.LogInformation("Composition ajoutée avec succès");

                    }
                    else // Existing Composition
                    {   if (modele != null)
                        {
                            await DatabaseService.UpdateCompositionAsync(new Composition
                                {
                                    Id = composition.Id,
                                    Nom = composition.Type,
                                    Lien = fileUrl,
                                    ModeleId = modele.Id,
                                    UpdatedAt = DateTime.UtcNow
                                });
                        }
                        Logger.LogInformation("Composition modifiée avec succès");

                    }
                }
            }

            Navigation.NavigateTo("/modeles");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Erreur lors de la mise à jour du modèle : {ex.Message}");
        }
    }


    private void GoBack()
    {
        Navigation.NavigateTo("/modeles");
    }

    private void AddComposition()
    {
        compositionModels.Add(new CompositionModel { Type = string.Empty });
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e, int index)
    {
        var file = e.File;
        compositionModels[index].File = file;
    }

    private async Task<string> UploadFile(IBrowserFile file)
    {
        try
        {
            var baseDirectory = AppDomain.CurrentDomain.BaseDirectory;
            var projectRoot = Path.Combine(baseDirectory, "..", "..", "..", "..", "..", "wwwroot", "pdf");
            var wwwrootPath = Path.GetFullPath(projectRoot);

            if (!Directory.Exists(wwwrootPath))
            {
                Directory.CreateDirectory(wwwrootPath);
            }

            var fileName = $"{DateTime.Now:yyyyMMddHHmmss}_{file.Name}";
            var filePath = Path.Combine(wwwrootPath, fileName);

            using (var stream = file.OpenReadStream())
            {
                using (var fileStream = new FileStream(filePath, FileMode.Create, FileAccess.Write))
                {
                    await stream.CopyToAsync(fileStream);
                }
            }
            UploadFileToFtp(filePath);

            return Path.Combine("pdf", fileName).Replace("\\", "/");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Erreur : {ex.Message}");
            throw;
        }
    }

    private void UploadFileToFtp(string filePath)
    {
        try
        {
            string ftpServer = "ftp://10.192.154.2/ftp/files/pdf/";
            string username = "ftpuser";
            string password = "Not24get";
            string fileName = Path.GetFileName(filePath);
            string ftpFullPath = ftpServer + fileName;

            using (WebClient client = new WebClient())
            {
                client.Credentials = new NetworkCredential(username, password);

                // Activer le mode passif (utile si actif est bloqué)
                FtpWebRequest request = (FtpWebRequest)WebRequest.Create(ftpFullPath);
                request.Method = WebRequestMethods.Ftp.UploadFile;
                request.Credentials = new NetworkCredential(username, password);
                request.UsePassive = true; // Essaie false si ça ne marche pas
                request.UseBinary = true;
                request.KeepAlive = false;

                byte[] fileContents = File.ReadAllBytes(filePath);
                using (Stream requestStream = request.GetRequestStream())
                {
                    requestStream.Write(fileContents, 0, fileContents.Length);
                }

                using (FtpWebResponse response = (FtpWebResponse)request.GetResponse())
                {
                    Console.WriteLine($"Upload terminé, statut : {response.StatusDescription}");
                }
            }
        }
        catch (WebException ex)
        {
            Console.WriteLine($"Erreur FTP : {ex.Message}");
            if (ex.Response != null)
            {
                using (StreamReader reader = new StreamReader(ex.Response.GetResponseStream()))
                {
                    string errorDetails = reader.ReadToEnd();
                    Console.WriteLine($"Détails de l'erreur : {errorDetails}");
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Autre erreur : {ex.Message}");
        }
    }

    private class CompositionModel
    {
        public string ?Type { get; set; } = string.Empty;
        public string ?ExistingFileName { get; set; } = string.Empty;
        public IBrowserFile? File { get; set; }
        public ulong Id { get; set; }
    }
}
