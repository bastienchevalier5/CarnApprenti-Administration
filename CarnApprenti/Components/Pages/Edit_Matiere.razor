@page "/edit_matiere/{matiereId}"
@using Microsoft.AspNetCore.Components.Forms
@using static CarnApprenti.LivretApprentissageContext
@inject DatabaseService DatabaseService
@inject NavigationManager Navigation
@using CarnApprenti.Components.Layout

<div class="sidebar">
    <NavMenu />
</div>

<div style="margin-left:250px">


    <button class="btn btn-secondary mb-3" @onclick="GoBack">← Retour</button>

    <h3 class="text-center mb-4">Modifier une Matière</h3>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (matiereToEdit == null)
    {
        <p class="text-center">Matière non trouvée ou en cours de chargement...</p>
    }
    else
    {
        <EditForm Model="matiereToEdit" class="text-center" OnValidSubmit="HandleEditMatiere">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-group mb-3 w-50 mx-auto">
                <label for="matiereNom" class="form-label">Nom de la matière</label>
                <InputText id="matiereNom" class="form-control" @bind-Value="matiereToEdit.Nom" />
            </div>

            <div class="form-group mb-3 w-50 mx-auto">
                <label for="formateurId" class="form-label">Formateur</label>
                <InputSelect id="formateurId" class="form-control" @bind-Value="matiereToEdit.FormateurId">

                    @foreach (var formateur in formateurs)
                    {
                        <option value="@formateur.Id">@formateur.Nom @formateur.Prenom</option>
                    }
                </InputSelect>
            </div>

            <button type="submit" class="btn btn-primary">Modifier</button>

        </EditForm>
    }
</div>
@code {
    [Parameter] public string? matiereId { get; set; }

    private Matiere? matiereToEdit;
    private List<Formateur>? formateurs;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            matiereToEdit = await DatabaseService.GetMatiereByIdAsync(ulong.Parse(matiereId));
            formateurs = await DatabaseService.GetFormateursAsync();
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors du chargement des informations : {ex.Message}");
            Navigation.NavigateTo("/formateurs/matieres");
        }
    }

    private async Task HandleEditMatiere()
    {
        try
        {
            if (string.IsNullOrEmpty(matiereToEdit?.Nom))
            {
                errorMessage = "Veuillez entrer un nom.";
                return;
            }
            await DatabaseService.UpdateMatiereAsync(matiereToEdit);
            Navigation.NavigateTo("/formateurs/matieres");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de la mise à jour de la matière : {ex.Message}");
            // Vous pouvez ajouter ici un message d'erreur à afficher à l'utilisateur
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/formateurs/matieres");
    }
}
