@page "/add_groupes"
@using static CarnApprenti.LivretApprentissageContext
@inject DatabaseService DatabaseService
@inject IJSRuntime js
@inject NavigationManager Navigation
@using CarnApprenti.Components.Layout

<div class="sidebar">
    <NavMenu />
</div>

<div style="margin-left:250px">
    <button class="btn btn-secondary mb-3" @onclick="GoBack">← Retour</button>

    <h1 class="text-center mb-4">Ajouter un groupe</h1>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }
    <EditForm Model="newGroupe" class="text-center" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-3 w-50 mx-auto">
            <label for="groupeName" class="form-label">Nom du groupe</label>
            <InputText id="groupeName" class="form-control" @bind-Value="newGroupe.Nom"  />
        </div>

        <div class="form-group mb-3 w-50 mx-auto">
            <label for="referent" class="form-label">Référent</label>
            <InputSelect id="referent" class="form-control" @bind-Value="selectedReferentId">
                <option value="">-- Sélectionnez un référent --</option>

                @foreach (var referent in referents)
                {
                    <option value="@referent.Id">@referent.Nom @referent.Prenom</option>
                }
            </InputSelect>
        </div>

        <!-- Sélectionner les matières et formateurs -->
        <div class="form-group mb-3 w-50 mx-auto">
            <label for="matieres" class="form-label">Equipe pédagogique</label>
            <table class="table text-white" id="equipe_pedagogique">
                <thead>
                    <tr>
                        <th>Matière</th>
                        <th>Supprimer la ligne</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in equipePedagogique)
                    {
                        <tr>
                            <td>
                                <InputSelect @bind-Value="item.MatiereId" class="form-control">
                                    <option value="">-- Sélectionnez une matière --</option>

                                    @foreach (var matiere in matieres)
                                    {
                                        <option value="@matiere.Id">@matiere.Nom (@matiere.Formateur.Prenom @matiere.Formateur.Nom)</option>
                                    }
                                </InputSelect>
                            </td>
                            <td>
                                <button type="button" class="btn btn-danger" @onclick="() => RemoveRow(item)">Supprimer</button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button type="button" class="btn btn-success" @onclick="AddRow">Ajouter une ligne</button>
        </div>

        <button type="submit" class="btn btn-primary mb-3">Ajouter</button>

    </EditForm>
</div>
@code {
    private Groupe newGroupe = new Groupe();
    private List<User> referents = new List<User>();
    private List<Matiere> matieres = new List<Matiere>();
    private List<EquipePedagogiqueItem> equipePedagogique = new List<EquipePedagogiqueItem>();
    private ulong selectedReferentId;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Charger les référents
            referents = await DatabaseService.GetReferentsAsync();

            // Charger les matières avec leurs formateurs associés
            matieres = await DatabaseService.GetMatieresWithFormateursAsync(); // Nouvelle méthode pour charger matières et formateurs associés

            equipePedagogique.Add(new EquipePedagogiqueItem());

        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Erreur de chargement des données : {ex.Message}");
        }
    }

    private void AddRow()
    {
        equipePedagogique.Add(new EquipePedagogiqueItem());
    }

    private void RemoveRow(EquipePedagogiqueItem item)
    {
        equipePedagogique.Remove(item);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            if (string.IsNullOrEmpty(newGroupe.Nom))
            {
                errorMessage = "Veuillez entrer un nom.";
                return;
            }

            if (selectedReferentId > 0)
            {
                var referent = referents.FirstOrDefault(r => r.Id == selectedReferentId);
                if (referent != null)
                {
                    referent.GroupeId = newGroupe.Id;
                    await DatabaseService.UpdateUserAsync(referent);
                }
            }
            else
            {
                errorMessage = "Veuillez sélectionner un référent.";
                return;
            }
      
            // Assigner les matières et formateurs au groupe
            foreach (var item in equipePedagogique)
            {
                if (item.MatiereId > 0)
                {
                    await DatabaseService.AddMatiereToGroupeAsync(newGroupe.Id, item.MatiereId); // Ajout de l'ID formateur
                } else
                {
                    errorMessage = "Veuillez ajouter au moins une matière";
                    return;
                }
            }
            await DatabaseService.AddGroupeAsync(newGroupe);
            Navigation.NavigateTo("/groupes");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Erreur lors de l'ajout du groupe : {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/groupes");
    }

    // Classe pour gérer les lignes de l'équipe pédagogique
    public class EquipePedagogiqueItem
    {
        public ulong? MatiereId { get; set; } = null;
        public ulong FormateurId { get; set; }
        public List<User> MatiereFormateurs { get; set; } = new List<User>(); // Liste des formateurs associés à la matière
    }
}
