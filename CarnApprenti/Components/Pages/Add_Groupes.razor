@page "/add_groupes"
@using static CarnApprenti.LivretApprentissageContext
@inject DatabaseService DatabaseService
@inject IJSRuntime js
@inject NavigationManager Navigation

<button class="btn btn-secondary mb-4" @onclick="GoBack">Retour</button>

<h1 class="text-center mb-4">Ajouter un groupe</h1>

<EditForm Model="newGroupe" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group mb-3">
        <label for="groupeName" class="form-label">Nom du groupe</label>
        <InputText id="groupeName" class="form-control" @bind-Value="newGroupe.Nom" />
    </div>

    <div class="form-group mb-3">
        <label for="referent" class="form-label">Référent</label>
        <InputSelect id="referent" class="form-control" @bind-Value="selectedReferentId">
            @foreach (var referent in referents)
            {
                <option value="@referent.Id">@referent.Nom @referent.Prenom</option>
            }
        </InputSelect>
    </div>

    <!-- Sélectionner les matières et formateurs -->
    <div class="form-group mb-3">
        <label for="matieres" class="form-label">Equipe pédagogique</label>
        <table class="table" id="equipe_pedagogique">
            <thead>
                <tr>
                    <th>Matière</th>
                    <th>Formateur</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in equipePedagogique)
                {
                    <tr>
                        <td>
                            <InputSelect @bind-Value="item.MatiereId" class="form-control">
                                @foreach (var matiere in matieres)
                                {
                                    <option value="@matiere.Id">@matiere.Nom (@matiere.Formateur.Prenom @matiere.Formateur.Nom)</option>
                                }
                            </InputSelect>
                        </td>
                        <td>
                            <button type="button" class="btn btn-danger" @onclick="() => RemoveRow(item)">Supprimer</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <button type="button" class="btn btn-success" @onclick="AddRow">Ajouter une ligne</button>
    </div>

    <div class="d-flex justify-content-center mb-4">
        <button type="submit" class="btn btn-primary btn-lg">Ajouter le groupe</button>
    </div>
</EditForm>

@code {
    private Groupe newGroupe = new Groupe();
    private List<User> referents = new List<User>();
    private List<Matiere> matieres = new List<Matiere>();
    private List<EquipePedagogiqueItem> equipePedagogique = new List<EquipePedagogiqueItem>();
    private ulong selectedReferentId;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Charger les référents
            referents = await DatabaseService.GetReferentsAsync();

            // Charger les matières avec leurs formateurs associés
            matieres = await DatabaseService.GetMatieresWithFormateursAsync(); // Nouvelle méthode pour charger matières et formateurs associés
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Erreur de chargement des données : {ex.Message}");
        }
    }

    private void AddRow()
    {
        equipePedagogique.Add(new EquipePedagogiqueItem());
    }

    private void RemoveRow(EquipePedagogiqueItem item)
    {
        equipePedagogique.Remove(item);
    }

    private async Task HandleValidSubmit()
    {
        try
        {
            // Ajouter le groupe
            await DatabaseService.AddGroupeAsync(newGroupe);

            // Assigner les matières et formateurs au groupe
            foreach (var item in equipePedagogique)
            {
                if (item.MatiereId > 0)
                {
                    await DatabaseService.AddMatiereToGroupeAsync(newGroupe.Id, item.MatiereId); // Ajout de l'ID formateur
                }
            }

            // Assigner un référent si sélectionné
            if (selectedReferentId > 0)
            {
                var referent = referents.FirstOrDefault(r => r.Id == selectedReferentId);
                if (referent != null)
                {
                    referent.GroupeId = newGroupe.Id;
                    await DatabaseService.UpdateUserAsync(referent);
                }
            }

            Navigation.NavigateTo("/groupes");
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Erreur lors de l'ajout du groupe : {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/groupes");
    }

    // Classe pour gérer les lignes de l'équipe pédagogique
    public class EquipePedagogiqueItem
    {
        public ulong MatiereId { get; set; }
        public ulong FormateurId { get; set; }
        public List<User> MatiereFormateurs { get; set; } = new List<User>(); // Liste des formateurs associés à la matière
    }
}
