@page "/groupes"
@using static CarnApprenti.LivretApprentissageContext
@inject NavigationManager Navigation
@inject DatabaseService DatabaseService
@inject IJSRuntime js

<button @onclick="GoBack" class="retour-link bouton">Retour</button>
<h1>Gestion des groupes</h1>

<div class="container_bouton">
    <a href="add_groupes" class="bouton">Ajouter un groupe</a>
</div>

@if (groupes == null)
{
    <p>Chargement des groupes...</p>
}
else if (!groupes.Any())
{
    <p>Aucun groupe trouvé.</p>
}
else
{
    <table class="users" border="1">
        <thead>
            <tr>
                <th>Groupe</th>
                <th>Référent</th>
                <th>Modifier</th>
                <th>Supprimer</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var groupe in groupes)
            {
                <tr>
                    <td>@groupe.Nom</td>
                    <td>@(groupe.Referent != null ? groupe.Referent.Nom + " " + groupe.Referent.Prenom : "Aucun référent")</td>
                    <td>
                        <a class="btn btn-warning" href="edit_groupes/@groupe.Id">
                            Modifier
                        </a>
                    </td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => ConfirmDelete(groupe.Id)">Supprimer</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<GroupeWithReferent>? groupes;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            groupes = await DatabaseService.GetGroupesWithReferentAsync();
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Erreur de chargement des groupes : {ex.Message}");
        }
    }

    private async Task LoadGroupes()
    {
        try
        {
            groupes = await DatabaseService.GetGroupesWithReferentAsync();
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Erreur de chargement des groupes : {ex.Message}");
        }
    }

    private async Task ConfirmDelete(ulong idGroupe)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Êtes-vous sûr de vouloir supprimer ce groupe ?");
        if (confirmed)
        {
            await DeleteGroupe(idGroupe);
        }
    }

    private async Task DeleteGroupe(ulong idGroupe)
    {
        try
        {
            await DatabaseService.DeleteGroupeAsync(idGroupe);
            await LoadGroupes(); // Recharger la liste après suppression
        }
        catch (Exception ex)
        {
            await js.InvokeVoidAsync("alert", $"Erreur lors de la suppression du groupe : {ex.Message}");
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/");
    }
}
