@page "/edit_formateur/{formateurId}"
@using Microsoft.AspNetCore.Components.Forms
@inject DatabaseService DatabaseService
@inject NavigationManager Navigation
@using static CarnApprenti.LivretApprentissageContext
@inject IJSRuntime js

<button class="btn btn-secondary" @onclick="GoBack">← Retour</button>

<h3 class="text-center mb-4">Modifier un Formateur</h3>

@if (formateurToEdit == null)
{
    <p class="text-center">Chargement du formateur...</p>
}
else
{
    <EditForm Model="formateurToEdit" OnValidSubmit="HandleEditFormateur">
        <DataAnnotationsValidator />
        <ValidationSummary class="text-danger mb-3" />

        <div class="mb-4">
            <label for="nom" class="form-label">Nom</label>
            <InputText id="nom" class="form-control" @bind-Value="formateurToEdit.Nom" placeholder="Entrez le nom du formateur" />
        </div>

        <div class="mb-4">
            <label for="prenom" class="form-label">Prénom</label>
            <InputText id="prenom" class="form-control" @bind-Value="formateurToEdit.Prenom" placeholder="Entrez le prénom du formateur" />
        </div>

        <div class="d-flex justify-content-center mb-4">
            <button type="submit" class="btn btn-primary btn-lg">Modifier le Formateur</button>
        </div>
    </EditForm>
}

@code {
    [Parameter]
    public string formateurId { get; set; }

    private Formateur? formateurToEdit;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (ulong.Parse(formateurId) == 0)
            {
                throw new Exception("ID de formateur invalide.");
            }

            formateurToEdit = await DatabaseService.GetFormateurByIdAsync(ulong.Parse(formateurId));

            if (formateurToEdit == null)
            {
                throw new Exception("Formateur introuvable.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de la récupération du formateur : {ex.Message}");
            await js.InvokeVoidAsync("alert", "Erreur lors de la récupération du formateur : " + ex.Message);
            Navigation.NavigateTo("/formateurs/matieres");
        }
    }

    private async Task HandleEditFormateur()
    {
        try
        {
            await DatabaseService.UpdateFormateurAsync(formateurToEdit);
            Navigation.NavigateTo("/formateurs/matieres");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de la mise à jour du formateur : {ex.Message}");
            // Gérer l'erreur (par exemple afficher un message d'erreur)
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/formateurs/matieres");
    }
}
