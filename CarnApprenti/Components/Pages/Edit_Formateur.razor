@page "/edit_formateur/{formateurId}"
@using Microsoft.AspNetCore.Components.Forms
@inject DatabaseService DatabaseService
@inject NavigationManager Navigation
@using static CarnApprenti.LivretApprentissageContext
@inject IJSRuntime js
@using CarnApprenti.Components.Layout

<div class="sidebar">
    <NavMenu />
</div>

<div style="margin-left:250px">
    <button class="btn btn-secondary mb-3" @onclick="GoBack">← Retour</button>

    <h3 class="text-center mb-4">Modifier un Formateur</h3>

    @if (errorMessage != null)
    {
        <div class="alert alert-danger" role="alert">
            @errorMessage
        </div>
    }

    @if (formateurToEdit == null)
    {
        <p class="text-center">Chargement du formateur...</p>
    }
    else
    {
        <EditForm Model="formateurToEdit" class="text-center" OnValidSubmit="HandleEditFormateur">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger mb-3" />

            <div class="form-group mb-3 w-50 mx-auto">
                <label for="nom" class="form-label">Nom</label>
                <InputText id="nom" class="form-control" @bind-Value="formateurToEdit.Nom" />
            </div>

            <div class="form-group mb-3 w-50 mx-auto">
                <label for="prenom" class="form-label">Prénom</label>
                <InputText id="prenom" class="form-control" @bind-Value="formateurToEdit.Prenom" />
            </div>

            <button type="submit" class="btn btn-primary">Modifier</button>

        </EditForm>
    }
</div>
@code {
    [Parameter]
    public string? formateurId { get; set; }

    private Formateur? formateurToEdit;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (ulong.Parse(formateurId) == 0)
            {
                throw new Exception("ID de formateur invalide.");
            }

            formateurToEdit = await DatabaseService.GetFormateurByIdAsync(ulong.Parse(formateurId));

            if (formateurToEdit == null)
            {
                throw new Exception("Formateur introuvable.");
            }
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de la récupération du formateur : {ex.Message}");
            await js.InvokeVoidAsync("alert", "Erreur lors de la récupération du formateur : " + ex.Message);
            Navigation.NavigateTo("/formateurs/matieres");
        }
    }

    private async Task HandleEditFormateur()
    {
        try
        {
            if (string.IsNullOrEmpty(formateurToEdit?.Nom))
            {
                errorMessage = "Veuillez entrer un nom.";
                return;
            }

            if (string.IsNullOrEmpty(formateurToEdit.Prenom))
            {
                errorMessage = "Veuillez entrer un prénom.";
                return;
            }

            await DatabaseService.UpdateFormateurAsync(formateurToEdit);
            Navigation.NavigateTo("/formateurs/matieres");
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Erreur lors de la mise à jour du formateur : {ex.Message}");
            // Gérer l'erreur (par exemple afficher un message d'erreur)
        }
    }

    private void GoBack()
    {
        Navigation.NavigateTo("/formateurs/matieres");
    }
}
